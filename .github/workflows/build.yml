name: CI/CD Pipeline

on:
  push:
    branches:
      - develop  # Activeer workflow bij een push naar de 'develop'-branch.
      - main     # Activeer workflow bij een push naar de 'main'-branch.
  pull_request:
    types: [opened, synchronize, reopened]  # Activeer workflow bij pull requests.
  workflow_dispatch:  # Maak handmatige triggers mogelijk.

permissions:
  contents: write
  packages: write  # Schrijfrechten voor inhoud en pakketten.

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest  # De pipeline draait op de nieuwste Ubuntu-versie.
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        # Haalt de broncode op uit de repository.

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'  # Configureert Java Development Kit (JDK) versie 17.
          distribution: 'zulu'  # Gebruikt de Zulu-distributie van OpenJDK.

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: ${{ runner.os }}-gradle
        # Cachet Gradle-pakketten om builds sneller te maken.

      - name: Add execute permissions to Gradlew
        run: chmod +x ./gradlew
        # Zorgt ervoor dat de Gradle-wrapper uitvoerbaar is.

      - name: Build the Project
        run: ./gradlew assemble
        # Voert de Gradle 'assemble'-taak uit om de projectbronnen te bouwen.

      - name: Create JAR file
        run: ./gradlew jar
        # Compileert het project en maakt een JAR-bestand in de directory 'build/libs'.

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: build  # De 'test'-job draait pas na een succesvolle 'build'-job.
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        # Haalt de broncode opnieuw op, zodat de tests de juiste versie gebruiken.

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'zulu'
        # Configureert JDK 17 voor de teststappen.

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: ${{ runner.os }}-gradle
        # Hergebruikt de Gradle-cache om de tests sneller te draaien.

      - name: Add execute permissions to Gradlew
        run: chmod +x ./gradlew
        # Zorgt ervoor dat de Gradle-wrapper uitvoerbaar is.

      - name: Run Tests
        run: ./gradlew test --continue
        # Voert de unit tests uit met Gradle.

      # - name: Generate JaCoCo Report
      #   run: ./gradlew jacocoTestReport
      #   # Genereert een JaCoCo-codecoveragerapport. (UITGESCHAKELD vanwege foutmelding)

  quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    needs: test  # De 'quality'-job draait pas na een succesvolle 'test'-job.
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        # Haalt de broncode op voor de kwaliteitsanalyse.

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'zulu'
        # Configureert JDK 17 voor de kwaliteitsanalyse.

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: ${{ runner.os }}-gradle
        # Hergebruikt de Gradle-cache voor de analyse.

      - name: Add execute permissions to Gradlew
        run: chmod +x ./gradlew
        # Zorgt ervoor dat de Gradle-wrapper uitvoerbaar is.

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
        # Cachet SonarCloud-pakketten om de Sonar-analyse sneller te maken.

      - name: Code Quality Analysis with SonarCloud
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./gradlew build sonar --info --exclude-task check
        # Voert een codekwaliteitsanalyse uit met SonarCloud en genereert een rapport.
